
@BaseClass = BaseProperties_rifter_uch_enlisted
[
	parentname(target_destination) [ group="Hierarchy" ] : "Parent" : : "The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent."
	parentAttachmentName(parentAttachment) [ group="Hierarchy" ] : "Parent Model Bone/Attachment Name" : : "The name of the bone or attachment to attach to on the entity's parent in the movement hierarchy. Use !bonemerge to use bone-merge style attachment."

	useLocalOffset(boolean) [ group="Hierarchy" ] : "Use Model Attachment offsets" : 0 : "Whether to respect the specified local offset when doing the initial hierarchical attachment to its parent."
	local.origin(vector) [ group="Hierarchy" ] : "Model Attachment position offset" : : "Offset in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."
	local.angles(angle) [ group="Hierarchy" ] : "Model Attachment angular offset" : : "Angular offset in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."
	local.scales(vector) [ group="Hierarchy" ] : "Model Attachment scale" : : "Scale in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."

	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	tags(tags) : "Tags" : "" : "A list of general purpose tags for this entity, for interactions with other entities such as triggers."
]

//
// BreakableWall
//
@PointClass base(BaseProperties_rifter_uch_enlisted) tags( SupportsSolids ) model() = uch_breakable : "Acts the same as a func_breakable"
[
	model(resource:vmdl) { report = true hide_when_solid = true }: "World Model" : "" : "The model this entity should use."
	skin(materialgroup) { group = "Rendering" hide_when_solid = true } : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) { group = "Rendering" hide_when_solid = true } : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	rendercolor(color255) { alpha = true } : "Color (R G B A)" : "255 255 255 255" : "The color tint of this entity."
	health_until_break(float) : "Health Until Break" : 0 : ""
	can_pigmasks_destroy_this(boolean) : "Can Pigmasks Destroy" : 0 : ""
	destroy_sound(sound) : "Destruction Sound" :  : ""
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnBroken(void) : ""
]

//
// ChimeraSpawn
//
@PointClass base(BaseProperties_rifter_uch_enlisted) editormodel( "models/player/chimera/chimera.vmdl" ) 
metadata
{
	entity_tool_name = "Chimera Spawnpoint"
	entity_tool_group = "UCH"
	entity_tool_tip = "Defines a point where the chimera can spawn"
}
= info_chimera_start : ""
[
]

//
// MrSaturnSpawn
//
@PointClass base(BaseProperties_rifter_uch_enlisted) editormodel( "models/npc/mr_saturn.vmdl" ) 
metadata
{
	entity_tool_name = "Mr Saturn Spawnpoint"
	entity_tool_group = "UCH"
	entity_tool_tip = "Defines a point where mr saturn could potentially spawn at"
}
= info_mrsaturn_start : ""
[
]

//
// PigmaskSpawn
//
@PointClass base(BaseProperties_rifter_uch_enlisted) editormodel( "models/player/pigmask/pigmask.vmdl" ) 
metadata
{
	entity_tool_name = "Pigmask Spawnpoint"
	entity_tool_group = "UCH"
	entity_tool_tip = "Defines a point where a pigmask can spawn (or spectator)"
}
= info_pigmask_start : ""
[
]

